 ----------------------------------------------------------------------------------
-- School: CUHK(SZ)
-- Student: Ziqian Qiu
-- 
-- Create Date: 05/03/2017 10:41:33 PM
-- Design Name: Countdown Timer
-- Module Name: QuestionTimer - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity QuestionTimer is
    Generic (n: integer :=1500000;                           -- frequency used to show the 7-segment display
             m: integer :=25000000;                          -- frequency used to Increase/Reduce the time
             k: integer :=100000000);                        -- frequency used to countdown
    Port ( DisplayHIGH : out STD_LOGIC_VECTOR (6 downto 0);  -- A-G pins of left 4 7-segment display 
           DisplayLOW : out STD_LOGIC_VECTOR (6 downto 0);   -- A-G pins of right 4 7-segment display
           SWIN_HIGH: in STD_LOGIC_VECTOR (3 downto 0);      -- left 4 switch used to input minute
           SWIN_LOW: in STD_LOGIC_VECTOR (3 downto 0);       -- right 4 switch used to input minute
           CLK : in STD_LOGIC;                               -- system clock signal (100MHZ)
           SET : in STD_LOGIC;                               -- set minutes
           RESET: in STD_LOGIC;                              -- clear hour and second
           IncreaseTime : in STD_LOGIC;                      
           ReduceTime : in STD_LOGIC;
           StartCount : in STD_LOGIC;
           ChangeHour : in STD_LOGIC;                        -- if enabled, IncreaseTime and ReduceTime can be used to change the hour
           ChangeSecond : in STD_LOGIC;                      -- if enabled, IncreaseTime and ReduceTime can be used to change the second
           SelectHourHigh : out STD_LOGIC;                   -- Select the 7-segment display
           SelectHourLow : out STD_LOGIC;                    -- Select the 7-segment display
           SelectMinuteHigh : out STD_LOGIC;                 -- Select the 7-segment display
           SelectMinuteLow : out STD_LOGIC;                  -- Select the 7-segment display
           SelectSecondHigh : out STD_LOGIC;                 -- Select the 7-segment display
           SelectSecondLow : out STD_LOGIC);                 -- Select the 7-segment display
end QuestionTimer;

architecture Behavioral of QuestionTimer is

     signal countclk : integer range n-1 downto 0;
     signal countdown: integer range m-1 downto 0;
     signal CLK1H: integer range k-1 downto 0;
     signal SINM_HIGH: STD_LOGIC_VECTOR (3 downto 0);
     signal SINM_LOW: STD_LOGIC_VECTOR (3 downto 0);
     signal HOUR: integer range 0 to 99;
     signal SECOND: integer range 0 to 60;
   begin
   Process (CLK,SWIN_HIGH,SWIN_LOW,StartCount)
   begin
        if rising_edge(CLK) then
           countclk <= countclk - 1;
           countdown <= countdown - 1;
           CLK1H <= CLK1H - 1;
           if (SET = '1') then
              if SWIN_HIGH > "0101" then
                 SINM_HIGH <= "0101";
              else 
                 SINM_HIGH <= SWIN_HIGH;
              end if;
              if SWIN_LOW > "1001" then
                 SINM_LOW <= "1001";
              else
                 SINM_LOW <= SWIN_LOW;
              end if;
              if SINM_HIGH = "0110" then
                 SINM_LOW <= "0000";
              end if;
           end if;
           if (RESET = '1') then
              HOUR <= 0;
              SECOND <= 0;
           end if;
           if (countclk=1499999) then
               SelectHourHigh <= '1';
               SelectHourLow <= '0';
               SelectMinuteHigh <= '0';
               SelectMinuteLow <= '0';
               SelectSecondHigh <= '1';
               SelectSecondLow <= '0';
               case ((HOUR-(HOUR rem 10))/10) is
                   when 0 => DisplayHIGH <= "0000000";
                   when 1 => DisplayHIGH <= "0110000";
                   when 2 => DisplayHIGH <= "1101101";
                   when 3 => DisplayHIGH <= "1111001";
                   when 4  => DisplayHIGH <= "0110011";
                   when 5 => DisplayHIGH <= "1011011";
                   when 6 => DisplayHIGH <= "0011111";
                   when 7 => DisplayHIGH <= "1110000";
                   when 8 => DisplayHIGH <= "1111111";
                   when others => DisplayHIGH <= "1110011";
               end case;
               case ((SECOND-(SECOND rem 10))/10) is
                   when 0 => DisplayLOW <= "1111110";
                   when 1 => DisplayLOW <= "0110000";
                   when 2 => DisplayLOW <= "1101101";
                   when 3 => DisplayLOW <= "1111001";
                   when 4 => DisplayLOW <= "0110011";
                   when 5 => DisplayLOW <= "1011011";
                   when others => DisplayLOW <= "0011111";
               end case;
            end if;
           if (countclk = 1000000) then
               SelectHourHigh <= '0';
               SelectHourLow <= '1';
               SelectMinuteHigh <= '0';
               SelectMinuteLow <= '0';
               SelectSecondHigh <= '0';
               SelectSecondLow <= '1';
               case (HOUR rem 10) is
                   when 0 => DisplayHIGH <= "1111110";
                   when 1 => DisplayHIGH <= "0110000";
                   when 2 => DisplayHIGH <= "1101101";
                   when 3 => DisplayHIGH <= "1111001";
                   when 4  => DisplayHIGH <= "0110011";
                   when 5 => DisplayHIGH <= "1011011";
                   when 6 => DisplayHIGH <= "0011111";
                   when 7 => DisplayHIGH <= "1110000";
                   when 8 => DisplayHIGH <= "1111111";
                   when others => DisplayHIGH <= "1110011";
               end case;
               case (SECOND rem 10) is
                   when 0 => DisplayLOW <= "1111110";
                   when 1 => DisplayLOW <= "0110000";
                   when 2 => DisplayLOW <= "1101101";
                   when 3 => DisplayLOW <= "1111001";
                   when 4 => DisplayLOW <= "0110011";
                   when 5 => DisplayLOW <= "1011011";
                   when 6 => DisplayLOW <= "0011111";
                   when 7 => DisplayLOW <= "1110000";
                   when 8 => DisplayLOW <= "1111111";
                   when others => DisplayLOW <= "1110011";
               end case;
           end if;
           if (countclk=500000) then
               SelectHourHigh <= '0';
               SelectHourLow <= '0';
               SelectMinuteHigh <= '1';
               SelectMinuteLow <= '1';
               SelectSecondHigh <= '0';
               SelectSecondLow <= '0';
               case (SINM_HIGH) is
                   when "0000" => DisplayHIGH <= "1111110";
                   when "0001" => DisplayHIGH <= "0110000";
                   when "0010" => DisplayHIGH <= "1101101";
                   when "0011" => DisplayHIGH <= "1111001";
                   when "0100" => DisplayHIGH <= "0110011";
                   when "0101" => DisplayHIGH <= "1011011";
                   when others => DisplayHIGH <= "0011111";
               end case;
               case (SINM_LOW) is
                   when "0000" => DisplayLOW <= "1111110";
                   when "0001" => DisplayLOW <= "0110000";
                   when "0010" => DisplayLOW <= "1101101";
                   when "0011" => DisplayLOW <= "1111001";
                   when "0100" => DisplayLOW <= "0110011";
                   when "0101" => DisplayLOW <= "1011011";
                   when "0110" => DisplayLOW <= "0011111";
                   when "0111" => DisplayLOW <= "1110000";
                   when "1000" => DisplayLOW <= "1111111";
                   when others => DisplayLOW <= "1110011";
               end case;
            end if;
            if (countclk = 0) then
               countclk <=n-1;
            end if;
            if (countdown = 10000000) then
            if (ChangeHour ='1') then
               if (IncreaseTime = '1') then
                  HOUR <= HOUR + 1;
               end if;
               if (ReduceTime = '1') then
                  if (HOUR > 0) then
                  HOUR <= HOUR - 1;
                  else
                  HOUR <= 0;
                  end if;
               end if;
            end if;
            if (ChangeSecond ='1') then
               if (IncreaseTime = '1') then
                  if (SECOND <59) then
                     SECOND <= SECOND + 1;
                  end if;
                  if (SECOND = 59) then
                     SECOND <= 0;
                     if (SINM_LOW < "1001") then
                         SINM_LOW <= SINM_LOW + 1;
                     else
                         SINM_LOW <= "0000";
                         if (SINM_HIGH < "0101") then
                         SINM_HIGH <=SINM_HIGH + 1;
                         else
                         SINM_HIGH <= "0000";
                         HOUR <= HOUR + 1;
                         end if;
                     end if;
                  end if;     
               end if;
               if (ReduceTime = '1') then
                  if (SECOND > 0) then
                  SECOND <= SECOND - 1;
                  end if;
                  if (SECOND = 0) then
                     if (SINM_LOW > "0000") then
                         SECOND <= 59;
                         SINM_LOW <=SINM_LOW - 1; 
                     end if;
                     if (SINM_LOW = "0000") then
                         if (SINM_HIGH > "0000") then
                           SINM_LOW <= "1001";
                           SINM_HIGH <= SINM_HIGH - 1;
                           SECOND <= 59;
                         end if;
                         if (SINM_HIGH = "0000") THEN
                            if (HOUR > 0) then
                            SINM_HIGH <= "0101";
                            SINM_LOW <= "1001";
                            SECOND <= 59;
                            HOUR <= HOUR - 1;
                            else
                            SINM_HIGH <= "0000";
                            SINM_LOW <= "0000";
                            SECOND <=0;
                            end if;
                         end if; 
                      end if;       
                  end if;
               end if;
            end if;
            end if;
            if (countdown = 0) then
                countdown <= m-1;
            end if;
            if (StartCount = '1') then
                  if (CLK1H = k/2) then
                     if (SECOND > 0) then
                         SECOND <= SECOND -1;
                     end if;
                     if (SECOND = 0) then
                         if (SINM_LOW > "0000") then
                         SECOND <= 59;
                         SINM_LOW <= SINM_LOW - 1;
                         end if;
                         if (SINM_LOW = "0000") then
                            if (SINM_HIGH > "0000") then
                                SINM_LOW <= "1001";
                                SECOND <= 59;
                                SINM_HIGH <= SINM_HIGH - 1;
                            end if;
                            if (SINM_HIGH = "0000") then
                                if (HOUR > 0) then
                                   SINM_HIGH <= "0101";
                                   SINM_LOW <= "1001";
                                   HOUR <= HOUR - 1;
                                   SECOND <= 59;
                                else
                                   SINM_HIGH <= "0000";
                                   SINM_LOW <="0000";
                                   SECOND <=0;
                                end if;
                            end if;
                         end if;
                     end if;
                  end if;
                  if (CLK1H = 0) then
                      CLK1H <= k-1;
                  end if; 
               end if;
      end if;
      end process;
end Behavioral;
